// Code generated by MockGen. DO NOT EDIT.
// Source: connection_adapter.go
//
// Generated by this command:
//
//	mockgen -source=connection_adapter.go -destination=connection_generated.go -package grpcclient . ConnectionAdapter
//

// Package grpcclient is a generated GoMock package.
package grpcclient

import (
	context "context"
	reflect "reflect"

	generated "github.com/formancehq/stack/components/agent/internal/generated"
	gomock "go.uber.org/mock/gomock"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
	isgomock struct{}
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockConnection) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockConnectionMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConnection)(nil).CloseSend))
}

// Recv mocks base method.
func (m *MockConnection) Recv() (*generated.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*generated.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockConnectionMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConnection)(nil).Recv))
}

// Send mocks base method.
func (m *MockConnection) Send(arg0 *generated.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockConnectionMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConnection)(nil).Send), arg0)
}

// MockConnectionAdapter is a mock of ConnectionAdapter interface.
type MockConnectionAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionAdapterMockRecorder
	isgomock struct{}
}

// MockConnectionAdapterMockRecorder is the mock recorder for MockConnectionAdapter.
type MockConnectionAdapterMockRecorder struct {
	mock *MockConnectionAdapter
}

// NewMockConnectionAdapter creates a new mock instance.
func NewMockConnectionAdapter(ctrl *gomock.Controller) *MockConnectionAdapter {
	mock := &MockConnectionAdapter{ctrl: ctrl}
	mock.recorder = &MockConnectionAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionAdapter) EXPECT() *MockConnectionAdapterMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockConnectionAdapter) CloseSend(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockConnectionAdapterMockRecorder) CloseSend(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConnectionAdapter)(nil).CloseSend), arg0)
}

// Recv mocks base method.
func (m *MockConnectionAdapter) Recv(arg0 context.Context) (*generated.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv", arg0)
	ret0, _ := ret[0].(*generated.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockConnectionAdapterMockRecorder) Recv(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConnectionAdapter)(nil).Recv), arg0)
}

// Send mocks base method.
func (m *MockConnectionAdapter) Send(arg0 context.Context, arg1 *generated.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockConnectionAdapterMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConnectionAdapter)(nil).Send), arg0, arg1)
}

name: Default
on:
  merge_group:
  push:
    branches:
      - main
      - releases/*
  pull_request:
    types: [ assigned, opened, synchronize, reopened, labeled ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  PR:
    if: github.event_name == 'pull_request'
    name: Check PR Title
    runs-on: shipfox-2vcpu-ubuntu-2404
    permissions:
      statuses: write
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Dirty:
    runs-on: shipfox-4vcpu-ubuntu-2404
    steps:
      - uses: "actions/checkout@v4"
        with:
          fetch-depth: 0
      - name: Setup Nix
        uses: ./.github/actions/default
        with:
          token: ${{ secrets.NUMARY_GITHUB_TOKEN }}
      - name: Pre-commit
        env:
          GITHUB_TOKEN: ${{ secrets.NUMARY_GITHUB_TOKEN }}
        run: nix develop --impure --command just pc
      - name: Get changed files
        id: changed-files
        shell: bash
        run: |
          hasChanged=$(git status --porcelain) 
          if (( $(echo ${#hasChanged}) != 0 )); then
            git status
            echo "There are changes in the repository"
            exit 1
          fi


  Tests:
    runs-on: "shipfox-2vcpu-ubuntu-2404"
    needs:
      - TestsUnit
      - TestsIntegration
    steps:
      - name: Download a report artifact
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true
      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v5.4.3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: unit_filtered.txt,integration_filtered.txt
  
  TestsUnit:
    name: Tests (Unit)
    runs-on: shipfox-4vcpu-ubuntu-2404
    steps:
    - uses: "actions/checkout@v4"
      with:
        fetch-depth: 0
    - name: Setup Nix
      uses: ./.github/actions/default
      with:
        token: ${{ secrets.NUMARY_GITHUB_TOKEN }}
    - name: Pre-commit
      run: nix develop --impure --command just tests-unit
    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-unit-report
        path: ./coverage/unit_filtered.txt
  
  TestsIntegration:
    name: Tests (Integration)
    runs-on: shipfox-4vcpu-ubuntu-2404
    steps:
    - uses: "actions/checkout@v4"
      with:
        fetch-depth: 0
    - name: Setup Nix
      uses: ./.github/actions/default
      with:
        token: ${{ secrets.NUMARY_GITHUB_TOKEN }}
    - name: Pre-commit
      run: nix develop --impure --command just tests-integration
    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-integration-report
        path: ./coverage/integration_filtered.txt

  GoReleaser:
    runs-on: "shipfox-4vcpu-ubuntu-2404"
    if: contains(github.event.pull_request.labels.*.name, 'build-images') || github.ref == 'refs/heads/main' || github.event_name == 'merge_group'
    steps:
      - uses: "actions/checkout@v4"
        with:
          fetch-depth: 0
      - name: Setup Nix
        uses: ./.github/actions/default
        with:
          token: ${{ secrets.NUMARY_GITHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: "NumaryBot"
          password: ${{ secrets.NUMARY_GITHUB_TOKEN }}
      - run: >
          nix develop --impure --command just release-ci

        env:
          GITHUB_TOKEN: ${{ secrets.NUMARY_GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
  
  Deploy:
    runs-on: "shipfox-2vcpu-ubuntu-2404"
    if: github.ref == 'refs/heads/main'
    environment: staging
    needs:
      - GoReleaser
      - Dirty
      - Tests
    steps:
      - uses: earthly/actions-setup@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version: "latest"
      - uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0
      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      - name: "Deploy in staging"
        env:
          TAG: ${{ github.sha }}
          COMPONENT: agent
          ARGOCD_REGION_AUTH_TOKEN: ${{ secrets.ARGOCD_REGION_AUTH_TOKEN }}
        run: >
          earthly  
          --no-output 
          --secret AUTH_TOKEN=$ARGOCD_REGION_AUTH_TOKEN
          +deploy-staging
          --TAG=$TAG
          --COMPONENT=$COMPONENT
